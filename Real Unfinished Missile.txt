local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local Button1 = Instance.new("TextButton")
local Button2 = Instance.new("TextButton")
local Button3 = Instance.new("TextButton")
local TextBox = Instance.new("TextBox")
local UICorner1 = Instance.new("UICorner")
local UICorner2 = Instance.new("UICorner")
local UICorner3 = Instance.new("UICorner")
local UICorner4 = Instance.new("UICorner")
local UICorner5 = Instance.new("UICorner")

-- Parent
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- ScreenGui properties
ScreenGui.Name = "CustomDraggableGui"
ScreenGui.ResetOnSpawn = false

-- Frame properties
Frame.Name = "MainFrame"
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.5, -100, 0.5, -75)
Frame.Size = UDim2.new(0, 200, 0, 150)
Frame.Draggable = true
Frame.Active = true
Frame.Selectable = true

UICorner1.Parent = Frame

-- Button1 properties
Button1.Name = "Button1"
Button1.Parent = Frame
Button1.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
Button1.BorderSizePixel = 0
Button1.Position = UDim2.new(0.1, 0, 0.05, 0) -- Adjusted Y position slightly upward
Button1.Size = UDim2.new(0.8, 0, 0.2, 0)
Button1.Font = Enum.Font.SourceSans
Button1.Text = "Introduction"
Button1.TextColor3 = Color3.fromRGB(255, 255, 255)
Button1.TextSize = 18

UICorner2.Parent = Button1

-- Button2 properties
Button2.Name = "Button2"
Button2.Parent = Frame
Button2.BackgroundColor3 = Color3.fromRGB(100, 255, 100)
Button2.BorderSizePixel = 0
Button2.Position = UDim2.new(0.1, 0, 0.3, 0) -- Adjusted Y position slightly upward
Button2.Size = UDim2.new(0.8, 0, 0.2, 0)
Button2.Font = Enum.Font.SourceSans
Button2.Text = "Scan"
Button2.TextColor3 = Color3.fromRGB(255, 255, 255)
Button2.TextSize = 18

UICorner3.Parent = Button2

-- Button3 properties
Button3.Name = "Button3"
Button3.Parent = Frame
Button3.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
Button3.BorderSizePixel = 0
Button3.Position = UDim2.new(0.1, 0, 0.55, 0) -- Adjusted Y position slightly upward
Button3.Size = UDim2.new(0.8, 0, 0.2, 0)
Button3.Font = Enum.Font.SourceSans
Button3.Text = "Start"
Button3.TextColor3 = Color3.fromRGB(255, 255, 255)
Button3.TextSize = 18

UICorner4.Parent = Button3

-- TextBox properties
TextBox.Name = "TextBox"
TextBox.Parent = Frame
TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextBox.BorderSizePixel = 0
TextBox.Position = UDim2.new(0.1, 0, 0.8, 0) -- Adjusted Y position to fit within frame
TextBox.Size = UDim2.new(0.8, 0, 0.15, 0)
TextBox.Font = Enum.Font.SourceSans
TextBox.PlaceholderText = "Enter text here"
TextBox.Text = ""
TextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
TextBox.TextSize = 18

UICorner5.Parent = TextBox

-- Function to scan active players
local function scanPlayers(query)
    local players = game.Players:GetPlayers()
    local matches = {}

    for _, player in ipairs(players) do
        if string.find(player.Name:lower(), query:lower()) or string.find(player.DisplayName:lower(), query:lower()) then
            table.insert(matches, player.Name)
        end
    end

    return matches
end

-- Auto-complete function
local function autoComplete()
    local inputText = TextBox.Text
    local matches = scanPlayers(inputText)

    if #matches == 1 then
        TextBox.Text = matches[1]
        TextBox.TextEditable = false
    end
end

-- Event to handle text input changes
TextBox:GetPropertyChangedSignal("Text"):Connect(function()
    autoComplete()
end)

-- Print the target's username when Enter is pressed
TextBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local targetUsername = TextBox.Text
        if game.Players:FindFirstChild(targetUsername) then
            print("Target player found: " .. targetUsername)
        else
            print("No matching player found.")
        end
    end
end)

-- Make the Frame draggable
local UIS = game:GetService("UserInputService")
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

Frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Mouse click event for Button1
Button1.MouseButton1Click:Connect(function()
    local chatrem = game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest

-- Function to send message after a delay
local function saymessage(message)
    wait(2)  -- Wait for 2 seconds before sending the message
    chatrem:FireServer(message, "All")
    print("Sent Message: " .. message)
end

-- Example usage:
saymessage("ü§ñ I can assist in targeting someone within this server. Ask away!")
saymessage("üßêCan you tell me who's the target on this server?")

    print("Button1 clicked: Introduction")
end)

-- Mouse click event for Button2
Button2.MouseButton1Click:Connect(function()
    local chatrem = game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest

-- Function to send message after a delay
local function saymessage(message)
    wait(2)  -- Wait for 2 seconds before sending the message
    chatrem:FireServer(message, "All")
    print("Sent Message: " .. message)
end

-- Example usage:
saymessage("üîçScanning target for identification and tracking...")
saymessage("üéØTarget found!")
    print("Button2 clicked: Scan")
end)

-- Mouse click event for Button3
Button3.MouseButton1Click:Connect(function()
    local RunService = game:GetService("RunService")



-- Initial animation setup
local SpinAnim = Instance.new("Animation")
SpinAnim.AnimationId = "rbxassetid://188632011" -- Spin animation

local player = game.Players.LocalPlayer
local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
local spinTrack = humanoid:LoadAnimation(SpinAnim)

-- Function to play the spin animation
local function playSpinAnimation()
    spinTrack.Looped = true
    spinTrack:Play(.1, 1, 2)
end

-- Function to stop the spin animation
local function stopSpinAnimation()
    spinTrack:Stop()
end

-- Existing Script (Runs first)

-- Function to move the character upward
local function moveCharacterUp()
    local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Disable Animate script
if character.Animate then
    character.Animate.Disabled = true
end

    local HumanoidRP = game.Players.LocalPlayer.Character.HumanoidRootPart

    -- Create new BodyVelocity and BodyGyro instances
    local BV = Instance.new("BodyVelocity", HumanoidRP)
    local BG = Instance.new("BodyGyro", HumanoidRP)

    -- Set the MaxForce to a high value
    BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)

    -- Set the velocity to make the character ascend faster
    BV.Velocity = Vector3.new(0, 1.3, 0) -- Adjust the y-value as needed for desired speed

    -- Configure the BodyGyro
    game:GetService('RunService').RenderStepped:Connect(function()
        BG.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
        BG.D = 5000
        BG.P = 100000
        BG.CFrame = game.Workspace.CurrentCamera.CFrame
    end)
end

-- Function to stop ascending movement
local function stopAscendingMovement()
    local HumanoidRP = game.Players.LocalPlayer.Character.HumanoidRootPart

    -- Check if BodyVelocity exists and destroy it
    if HumanoidRP:FindFirstChildOfClass("BodyVelocity") then
        HumanoidRP:FindFirstChildOfClass("BodyVelocity"):Destroy()
    end

    -- Check if BodyGyro exists and destroy it
    if HumanoidRP:FindFirstChildOfClass("BodyGyro") then
        HumanoidRP:FindFirstChildOfClass("BodyGyro"):Destroy()
    end
end

-- Function to send chat messages
local function sendChatMessage(message)
    local chatEvents = game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents
    chatEvents.SayMessageRequest:FireServer(message, "All")
end

-- Function to toggle the spin animation, send messages, and stop ascending
local function toggleAnimationAndMessages()
    -- Start ascending the character
    moveCharacterUp()

    -- Play spin animation after 0.1 second
    wait(0.1)
    playSpinAnimation()

    -- Send messages with delays
    wait(1)
    sendChatMessage("üéØ Target acquisition in progress, meticulously scanning the coordinates for optimal precision.")
    wait(3)
    sendChatMessage("üîç Scanning the coordinates to pinpoint exact target location with utmost accuracy.")
    wait(3)
    sendChatMessage("üöÄ Deploying... Engaging systems for swift and decisive action.")
    wait(3)

    -- Stop spin animation and ascending movement
    stopSpinAnimation()
    stopAscendingMovement()
        local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

if character.Animate then
    character.Animate.Disabled = false
end

    -- Signal that this function has completed
    return true
end



-- Call the toggleAnimationAndMessages function and use a coroutine
local function startAnimationsAndMessages()
    local success = toggleAnimationAndMessages()

    -- Check if success is true before proceeding
    if success then
        local chatEvents = game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents
        print("Starting...")
        
        -- Add your new script logic here

        -- Example of new script functionality

    else
        local chatEvents = game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents
        chatEvents.SayMessageRequest:FireServer("‚ùå First script encountered an error.", "All")
    end
end

-- Start the animations and messages coroutine
startAnimationsAndMessages()

-- Additional Script (Runs after the existing script)

local function randomString()
    local length = 10
    local charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    local result = ""
    for i = 1, length do
        local index = math.random(1, #charset)
        result = result .. string.sub(charset, index, index)
    end
    return result
end

local function getRoot(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChildWhichIsA("BasePart")
end

local velocityHandlerName = randomString()
local gyroHandlerName = randomString()
local mfly1
local mfly2
local FLYING = false
local iyflyspeed = 50
local vehicleflyspeed = 50
local TARGET_PLAYER = nil
local track = nil  -- Track for animation

-- Load the animation
local Anim = Instance.new("Animation")
Anim.AnimationId = "rbxassetid://181526230"

-- Function to play the animation
local function playAnimation(character)
    if character and character:FindFirstChild("Humanoid") then
        track = character.Humanoid:LoadAnimation(Anim)
        track:Play(.1, 1, 1)
    end
end

-- Function to stop the animation
local function stopAnimation()
    if track then
        track:Stop()
    end
end

local function unmobilefly(speaker)
    pcall(function()
        FLYING = false
        local root = getRoot(speaker.Character)
        if root:FindFirstChild(velocityHandlerName) then
            root:FindFirstChild(velocityHandlerName):Destroy()
        end
        if root:FindFirstChild(gyroHandlerName) then
            root:FindFirstChild(gyroHandlerName):Destroy()
        end
        if speaker.Character:FindFirstChildWhichIsA("Humanoid") then
            speaker.Character:FindFirstChildWhichIsA("Humanoid").PlatformStand = false
        end
        if mfly1 then mfly1:Disconnect() end
        if mfly2 then mfly2:Disconnect() end
        stopAnimation()  -- Stop animation when flying stops
    end)
end

local function mobilefly(speaker, vfly)
    unmobilefly(speaker)
    FLYING = true

    local root = getRoot(speaker.Character)
    local camera = workspace.CurrentCamera
    local v3none = Vector3.new()
    local v3zero = Vector3.new(0, 0, 0)
    local v3inf = Vector3.new(9e9, 9e9, 9e9)

    local controlModule = require(speaker.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
    local bv = Instance.new("BodyVelocity")
    bv.Name = velocityHandlerName
    bv.Parent = root
    bv.MaxForce = v3zero
    bv.Velocity = v3zero

    local bg = Instance.new("BodyGyro")
    bg.Name = gyroHandlerName
    bg.Parent = root
    bg.MaxTorque = v3inf
    bg.P = 1000
    bg.D = 50

    mfly1 = speaker.CharacterAdded:Connect(function()
        local bv = Instance.new("BodyVelocity")
        bv.Name = velocityHandlerName
        bv.Parent = root
        bv.MaxForce = v3zero
        bv.Velocity = v3zero

        local bg = Instance.new("BodyGyro")
        bg.Name = gyroHandlerName
        bg.Parent = root
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 50
    end)

    mfly2 = RunService.RenderStepped:Connect(function()
        root = getRoot(speaker.Character)
        camera = workspace.CurrentCamera
        if speaker.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
            local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
            local VelocityHandler = root:FindFirstChild(velocityHandlerName)
            local GyroHandler = root:FindFirstChild(gyroHandlerName)

            VelocityHandler.MaxForce = v3inf
            GyroHandler.MaxTorque = v3inf
            if not vfly then humanoid.PlatformStand = true end
            GyroHandler.CFrame = camera.CoordinateFrame
            VelocityHandler.Velocity = v3none

            local direction = controlModule:GetMoveVector()

            if TARGET_PLAYER then
                local targetCharacter = TARGET_PLAYER.Character
                if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                    local targetPosition = targetCharacter.HumanoidRootPart.Position
                    local currentPosition = root.Position
                    local moveDirection = (targetPosition - currentPosition).unit
                    VelocityHandler.Velocity = moveDirection * ((vfly and vehicleflyspeed or iyflyspeed) * 50)
                    
                    -- Check distance to target
                    local distance = (targetPosition - currentPosition).Magnitude
                    if distance <= 1 then
                        unmobilefly(speaker)
                    end
                else
                    if direction.X > 0 then
                        VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
                    end
                    if direction.X < 0 then
                        VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
                    end
                    if direction.Z > 0 then
                        VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
                    end
                    if direction.Z < 0 then
                        VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
                    end
                end
            end
        end
    end)

    -- Play animation when flying starts (if TARGET_PLAYER exists)
    if TARGET_PLAYER then
        playAnimation(speaker.Character)
    end
end

local function flyCommand(args, speaker)
    if args[2] then
        local targetPlayer = game.Players:FindFirstChild(args[2])
        if targetPlayer then
            TARGET_PLAYER = targetPlayer
            mobilefly(speaker, false)
            if args[1] and tonumber(args[1]) then
                iyflyspeed = tonumber(args[1])
            end
        else
            TARGET_PLAYER = nil
            print("Player '" .. args[2] .. "' is not in the server or does not exist.")
            unmobilefly(speaker)  -- Ensure animation stops if player not found
        end
    end
end

local speaker = game.Players.LocalPlayer
local args = {1, TextBox.Text}  -- Example speed value and target username
flyCommand(args, speaker)

-- Check distance periodically to stop animation
RunService.RenderStepped:Connect(function()
    if TARGET_PLAYER then
        local root = getRoot(speaker.Character)
        local targetCharacter = TARGET_PLAYER.Character
        if root and targetCharacter then
            local currentPosition = root.Position
            local targetPosition = targetCharacter.HumanoidRootPart.Position
            local distance = (targetPosition - currentPosition).Magnitude
            if distance <= 1 then
                unmobilefly(speaker)
            end
        end
    end
end)

    wait(0.5)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local TARGET_PLAYER = nil  -- Define the variable to hold the target player object

local function getRoot(char)
    local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
    return rootPart
end

-- Function to find a player by username
local function getPlayerByUsername(username)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name == username then
            return player
        end
    end
    return nil
end

-- Replace 'YourUsername' with the username you want to target
local Username = TextBox.Text

-- Get the player object for the targeted username
local targetPlayer = getPlayerByUsername(Username)

if targetPlayer then
    -- Messages targeting the specific username
    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("üéØNew Target: " .. targetPlayer.Name, "All")

else
    -- If no player was found with the specified username, display an error message
    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("‚ùå Error: Target player not found.", "All")
    return
end

-- Flag to indicate whether unmobilefly has been called
local unmobileflyCalled = false

-- Example unmobilefly function (replace with your actual function)
local function unmobilefly(speaker)
    unmobileflyCalled = true
    -- Implement your unmobilefly logic here
    -- For example:
    -- Enable flying mode or set up necessary animations
    
    -- Once unmobilefly is called, start the main script functionality
    startMainScriptFunction()
end

-- Main script function that starts after unmobilefly
local function startMainScriptFunction()
    -- Bang Script using the target from the stare part
    local function r15(player)
        return player.Character and player.Character:FindFirstChildOfClass("Humanoid") and player.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R15
    end

    local players = targetPlayer
    if not players then
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("‚ùå Error: The player has left the game.", "All")
        return -- Stop the script
    end

    local playerLeftConnection
    playerLeftConnection = Players.PlayerRemoving:Connect(function(player)
        if player == players then
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("‚ùå Error: The player has left the game.", "All")
            playerLeftConnection:Disconnect()
            return -- Stop the script
        end
    end)

    local bangAnim = Instance.new("Animation")
    if not r15(game.Players.LocalPlayer) then
        bangAnim.AnimationId = "rbxassetid://148840371"
    else
        bangAnim.AnimationId = "rbxassetid://5918726674"
    end
    local bang = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(bangAnim)
    bang:Play(.1, 1, 1)

    local bangplr = players.Name
    local bangDied = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function()
        bangLoop = bangLoop:Disconnect()
        bang:Stop()
        bangAnim:Destroy()
        bangDied:Disconnect()
        playerLeftConnection:Disconnect()
    end)
    local bangOffset = CFrame.new(0, 1, -1.1)
    local bangLoop = RunService.Stepped:Connect(function()
        pcall(function()
            local otherRoot = game.Players[bangplr].Character.Head
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = otherRoot.CFrame * bangOffset
            local charPos = game.Players.LocalPlayer.Character.PrimaryPart.Position
            local tPos = players.Character:FindFirstChild("HumanoidRootPart").Position
            local TPos = Vector3.new(tPos.X, charPos.Y, tPos.Z)
            local newCFrame = CFrame.new(charPos, TPos)
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(newCFrame)
        end)
    end)

    -- Messages during bang animation with adjusted speeds and durations
    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("–°–ú–ûN –í”Ä–¢–°–ù, –ÖU–°–ö –¢–ù–ê–¢ –°–û–°–ö", "All")
    bang:AdjustSpeed(7)  -- Adjust speed to 7 after the first message
    wait(3)  -- Duration for the first message

    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("G–û–ûD G”ÄRL.. –í–ï –ê –ù–û–ï F–ûR –†–ê–†”Ä, –í–ï –ê GR–ï–ê–¢ –í”Ä–¢–°–ù..", "All")
    bang:AdjustSpeed(10)  -- Adjust speed to 10 after the second message
    wait(2)  -- Duration for the second message

    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("–ù–ûLY –Ö–ù”Ä–¢ ”Ä–ú –í–ûU–¢ –¢–û –°U–ú–ú!!", "All")
    bang:AdjustSpeed(13)  -- Adjust speed to 13 after the third message
    wait(3)  -- Duration for the third message

    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("–í–ûU–¢–¢–ê –íUZZ –ú“Æ F–ê–¢ –ê–Ö–Ö –°–û–°–ö", "All")
    bang:AdjustSpeed(15)  -- Adjust speed to 15 after the fourth message
    wait(2)  -- Duration for the fourth message

    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("–ê–ù–ù–ù –Ö–ù”Ä–¢...", "All")
    bang:AdjustSpeed(16)  -- Adjust speed to 16 after the fifth message
    wait(3)  -- Duration for the fifth message

    -- Set the animation speed to 0 after some time
    bang:AdjustSpeed(0)
    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("*—Å‚Å•‚Å•‚Å•u‚Å•‚Å•‚Å•m‚Å•‚Å•‚Å•‚Å•—ï alot*", "All")

    -- Stop the bang animation after a waiting time of 1 second
    wait(4)

    -- Clean up animations and connections
    if game.Players.LocalPlayer.Character:FindFirstChildOfClass("HumanoidRootPart"):FindFirstChildOfClass("BodyVelocity") then
        game.Players.LocalPlayer.Character:FindFirstChildOfClass("HumanoidRootPart"):FindFirstChildOfClass("BodyVelocity"):Destroy()
    end

    if game.Players.LocalPlayer.Character:FindFirstChildOfClass("HumanoidRootPart"):FindFirstChildOfClass("BodyGyro") then
        game.Players.LocalPlayer.Character:FindFirstChildOfClass("HumanoidRootPart"):FindFirstChildOfClass("BodyGyro"):Destroy()
    end

    bangLoop:Disconnect()
    bang:Stop()
    bangAnim:Destroy()
    bangDied:Disconnect()
    playerLeftConnection:Disconnect()
end

-- Example call to disable swimming for the local player
local function disableSwimmingForPlayer(player)
    if player and player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then
        local Humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
        -- Restore gravity and reset states as needed
        workspace.Gravity = 196.2
        local enums = Enum.HumanoidStateType:GetEnumItems()
        for _, v in pairs(enums) do
            Humanoid:SetStateEnabled(v, true)
        end
    end
end

-- Replace 'LocalPlayer' with the appropriate way to get the player who executed the script
local player = Players.LocalPlayer
disableSwimmingForPlayer(player)